# -*- coding: utf-8 -*-
"""Weather_pickle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qoQBkc5LYwu619cLVYQxKVGffo3EWL9Z
"""

import pandas as pd
import concurrent.futures
import logging

class WeatherDataPipeline:
    def __init__(self, cities):
        self.cities = cities
        self.BASE_URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=us&include=hours&key=6PM9LRYLZ79736NYT9GBYJRPN&contentType=csv"

    def fetch_weather_data(self, city):
        url = self.BASE_URL.format(city=city)
        try:
            df = pd.read_csv(url)
            df["city"] = city.replace("%20", " ")
            return df
        except Exception:
            return None

    def extract_weather_data(self):
        with concurrent.futures.ThreadPoolExecutor() as executor:
            results = list(executor.map(self.fetch_weather_data, self.cities))
        return [df for df in results if df is not None]

    def load_weather_data(self, dataframes):
        if dataframes:
            final_df = pd.concat(dataframes, ignore_index=True)
            return final_df
        else:
            return pd.DataFrame()

    def run_pipeline(self):
        extracted_data = self.extract_weather_data()
        final_df = self.load_weather_data(extracted_data)
        return final_df

major_cities = [
    # USA
    "new%20york%20city", "los%20angeles", "chicago", "houston", "phoenix", "miami", "philadelphia",
    "san%20antonio", "san%20diego", "dallas", "san%20jose", "austin", "jacksonville", "fort%20worth",
    "columbus", "charlotte", "indianapolis", "san%20francisco", "seattle", "denver", "newark",

    # Canada
    "toronto", "vancouver", "montreal", "calgary", "ottawa", "edmonton", "winnipeg", "quebec%20city",

    # UK
    "london", "birmingham", "manchester", "glasgow", "edinburgh", "leeds", "bristol", "sheffield",

    # France
    "paris", "marseille", "lyon", "toulouse", "nice", "nantes", "strasbourg", "montpellier", "bordeaux",

    # Germany
    "berlin", "hamburg", "munich", "frankfurt", "stuttgart", "cologne", "dusseldorf", "dresden",

    # Spain
    "madrid", "barcelona", "valencia", "seville", "bilbao", "malaga", "zaragoza", "murcia", "palma",

    # Italy
    "rome", "milan", "naples", "turin", "palermo", "genoa", "bologna", "florence", "venice",

    # Austria
    "vienna",

    # Russia
    "moscow", "st%20petersburg", "novosibirsk", "yekaterinburg", "nizhny%20novgorod", "samara", "omsk",

    # China
    "beijing", "shanghai", "shenzhen", "guangzhou", "chengdu", "wuhan", "xian", "tianjin",

    # Japan
    "tokyo", "osaka", "kyoto", "yokohama", "sapporo", "nagoya", "fukuoka", "hiroshima",

    # South Korea
    "seoul", "busan", "incheon", "daegu", "daejeon", "gwangju",

    # Hong Kong & Taiwan
    "hong%20kong", "taipei",

    # Thailand
    "bangkok", "chiang%20mai", "phuket",

    # Indonesia
    "jakarta", "surabaya", "bandung",

    # India
    "mumbai", "delhi", "bangalore", "hyderabad", "chennai", "kolkata", "ahmedabad", "pune", "jaipur", "warangal",

    # Pakistan
    "islamabad", "karachi", "lahore",

    # Afghanistan
    "kabul",

    # Bangladesh
    "dhaka", "chittagong",

    # Turkey
    "istanbul", "ankara", "izmir",

    # Iran
    "tehran", "mashhad",

    # Saudi Arabia
    "riyadh", "jeddah",

    # Egypt
    "cairo", "alexandria",

    # South Africa
    "cape%20town", "johannesburg",

    # Kenya
    "nakuru", "kisumu",

    # Nigeria
    "lagos", "abuja", "kano",

    # Mexico
    "mexico%20city", "guadalajara", "monterrey",

    # Argentina
    "buenos%20aires", "cordoba",

    # Brazil
    "rio%20de%20janeiro", "sao%20paulo",

    # Colombia
    "bogota", "medellin",

    # Chile
    "santiago", "valparaiso",

    # Peru
    "lima", "arequipa",

    # Venezuela
    "caracas", "maracaibo",

    # Caribbean
    "havana", "santo%20domingo",

    # Middle East
    "doha", "dubai",

    # Southeast Asia
    "singapore", "manila",

    # Australia & New Zealand
    "sydney", "melbourne", "brisbane", "perth", "canberra"
]


# Run pipeline and return data
pipeline = WeatherDataPipeline(major_cities)
df = pipeline.run_pipeline()

# Return df to Power BI
df

